from functools import lru_cache
from typing import Literal

from pydantic_settings import BaseSettings, SettingsConfigDict


class Settings(BaseSettings):
    # Project metadata
    PROJECT_NAME: str = ""
    VERSION: str = ""
    API_V1_PREFIX: str = ""
    BASE_URL: str = ""
    REDIS_URL: str = ""
    OPENAI_API_KEY: str = ""
    SUPABASE_PROJECT_ID: str = ""
    SUPABASE_SERVICE_ROLE_KEY: str = ""
    
    # Environment settings
    ENVIRONMENT: Literal["development", "testing", "production"] = "development"
    DEBUG: bool = True
    
    # Server settings
    HOST: str = ""
    PORT: int = ""
    
    # Database settings (using existing Supabase configuration)
    POSTGRES_SERVER: str = ""
    POSTGRES_USER: str = ""
    POSTGRES_PASSWORD: str = ""
    POSTGRES_DB: str = ""
    DATABASE_URL: str = ""

    TEST_POSTGRES_SERVER: str = ""
    TEST_POSTGRES_USER: str = ""
    TEST_POSTGRES_PASSWORD: str = ""
    TEST_POSTGRES_DB: str = ""
    TEST_DATABASE_URL: str = ""
    
    # JWT settings
    JWT_SECRET_KEY: str = ""
    JWT_ALGORITHM: str = ""
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 0
    
    # CORS settings
    CORS_ORIGINS: list[str] = [] # Frontend URL
    
    # Rate limiting
    RATE_LIMIT_PER_SECOND: float = 0
    
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        case_sensitive=True,
        extra="allow",
    )

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        if not self.DATABASE_URL and self.POSTGRES_SERVER:
            self.DATABASE_URL = (
                f"postgresql://{self.POSTGRES_USER}:{self.POSTGRES_PASSWORD}"
                f"@{self.POSTGRES_SERVER}/{self.POSTGRES_DB}"
            )


@lru_cache
def get_settings() -> Settings:
    """
    Get cached settings instance.
    Returns:
        Settings: Application settings
    """
    return Settings() 