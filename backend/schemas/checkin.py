from datetime import date, datetime
from enum import Enum
from typing import Optional
from uuid import UUID

from pydantic import BaseModel, Field


# Enum for check-in type
class CheckInType(str, Enum):
    morning = "morning"
    afternoon = "afternoon"
    evening = "evening"
    night = "night"

# Base model for check-in fields
class CheckInBase(BaseModel):
    type: CheckInType = Field(..., example="morning")
    energy_level: int = Field(..., ge=0, le=10, example=7, description="Energy level from 0 to 10")
    notes: Optional[str] = Field(None, example="Felt great after morning run.")

# Model for creating a new check-in (user_id is set by backend)
class CheckInCreate(CheckInBase):
    pass

# Model for updating a check-in (all fields optional)
class CheckInUpdate(BaseModel):
    type: Optional[CheckInType] = None
    energy_level: Optional[int] = Field(None, ge=0, le=10)
    notes: Optional[str] = None

# Model for API responses (includes all fields, check_in_date is generated by DB)
class CheckInResponse(CheckInBase):
    id: UUID
    user_id: UUID
    created_at: datetime
    check_in_date: date = Field(..., description="Date of the check-in, generated by the database.")

    class Config:
        from_attributes = True 